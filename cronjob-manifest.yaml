apiVersion: batch/v1
kind: CronJob
metadata:
  name: db-query-cronjob
  namespace: default
spec:
  # Run every day at 2 AM UTC
  schedule: "0 2 * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        metadata:
          labels:
            app: db-query-cronjob
        spec:
          serviceAccountName: db-query-service-account
          restartPolicy: OnFailure
          containers:
          - name: db-query
            image: <your-ecr-repo>/<your-image>:latest
            imagePullPolicy: Always
            env:
            # AWS Region for Secrets Manager
            - name: AWS_REGION
              value: "us-east-1"
            # Name of the secret in AWS Secrets Manager
            - name: DB_SECRET_NAME
              value: "database-credentials"
            # Database query parameters
            - name: DB_TABLE
              value: "your_table_name"
            command:
            - /bin/sh
            - -c
            - |
              set -e
              
              # Install AWS CLI if not in image
              # apk add --no-cache aws-cli postgresql-client
              
              # Retrieve credentials from AWS Secrets Manager
              SECRET_JSON=$(aws secretsmanager get-secret-value \
                --secret-id $DB_SECRET_NAME \
                --query SecretString \
                --output text)
              
              # Parse JSON credentials (assuming format: {"username":"user","password":"pass","host":"host","port":"5432","database":"dbname"})
              DB_HOST=$(echo $SECRET_JSON | jq -r '.host')
              DB_PORT=$(echo $SECRET_JSON | jq -r '.port')
              DB_NAME=$(echo $SECRET_JSON | jq -r '.database')
              DB_USER=$(echo $SECRET_JSON | jq -r '.username')
              DB_PASSWORD=$(echo $SECRET_JSON | jq -r '.password')
              
              # Build connection string (PostgreSQL example)
              export PGPASSWORD=$DB_PASSWORD
              
              # Execute query
              psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "SELECT * FROM $DB_TABLE LIMIT 10;"
              
              echo "Query executed successfully"
            resources:
              requests:
                memory: "256Mi"
                cpu: "250m"
              limits:
                memory: "512Mi"
                cpu: "500m"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: db-query-service-account
  namespace: default
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::<AWS_ACCOUNT_ID>:role/<IAM_ROLE_NAME>
---
# Example IAM Policy (create this in AWS IAM)
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Action": [
#         "secretsmanager:GetSecretValue",
#         "secretsmanager:DescribeSecret"
#       ],
#       "Resource": "arn:aws:secretsmanager:<region>:<account-id>:secret:<secret-name>*"
#     }
#   ]
# }
---
# Example Trust Policy for IAM Role
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Principal": {
#         "Federated": "arn:aws:iam::<AWS_ACCOUNT_ID>:oidc-provider/oidc.eks.<region>.amazonaws.com/id/<OIDC_ID>"
#       },
#       "Action": "sts:AssumeRoleWithWebIdentity",
#       "Condition": {
#         "StringEquals": {
#           "oidc.eks.<region>.amazonaws.com/id/<OIDC_ID>:sub": "system:serviceaccount:default:db-query-service-account",
#           "oidc.eks.<region>.amazonaws.com/id/<OIDC_ID>:aud": "sts.amazonaws.com"
#         }
#       }
#     }
#   ]
# }
